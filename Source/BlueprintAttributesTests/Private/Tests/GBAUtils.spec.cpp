// Copyright 2021-2022 Mickael Daniel. All Rights Reserved.

#include "AttributeSet.h"
#include "Misc/AutomationTest.h"
#include "Utils/GBAUtils.h"

BEGIN_DEFINE_SPEC(FGBAUtilsSpec, "BlueprintAttributes.GBAUtils", EAutomationTestFlags::ProductFilter | EAutomationTestFlags::ApplicationContextMask)

	const FString FixtureLoadPath = TEXT("/BlueprintAttributesTests/Fixtures/GBAUtils_Spec/GBA_AttributeSetsUtils_Test.GBA_AttributeSetsUtils_Test_C");

END_DEFINE_SPEC(FGBAUtilsSpec)

void FGBAUtilsSpec::Define()
{
	Describe(TEXT("GBAUtils::GetAttributeClassName()"), [this]()
	{
		It(TEXT("should return same name when name is without trailing _C"), [this]()
		{
			const FString TestClassName = TEXT("Foo_AttributeSet");
			const FString Result = FGBAUtils::GetAttributeClassName(TestClassName);
			TestEqual(TEXT("Returns same name when name is without trailing _C"), Result, TestClassName);
		});

		It(TEXT("should strip out _C from the end of a class name"), [this]()
		{
			const FString Result = FGBAUtils::GetAttributeClassName(TEXT("Foo_AttributeSet_C"));
			TestEqual(TEXT("Returns name without trailing _C"), Result, TEXT("Foo_AttributeSet"));
		});

		It(TEXT("should strip out _C from the end of a class name (BP Loaded class)"), [this]()
		{
			const UClass* LoadedClass = StaticLoadClass(UObject::StaticClass(), nullptr, *FixtureLoadPath);
			AddInfo(FString::Printf(TEXT("Test with %s loaded BP class"), *GetNameSafe(LoadedClass)));

			if (!LoadedClass)
			{
				AddError(FString::Printf(TEXT("Couldn't load %s BP"), *FixtureLoadPath));
				return;
			}

			const FString Result = FGBAUtils::GetAttributeClassName(LoadedClass);
			TestEqual(TEXT("Returns name without trailing _C"), LoadedClass->GetName(), TEXT("GBA_AttributeSetsUtils_Test_C"));
			TestEqual(TEXT("Returns name without trailing _C"), Result, TEXT("GBA_AttributeSetsUtils_Test"));
		});
	});


	Describe(TEXT("GBAUtils::GetAllAttributeProperties()"), [this]()
	{
		It(TEXT("returns all attribute properties"), [this]()
		{
			TArray<FProperty*> Properties;
			FGBAUtils::GetAllAttributeProperties(Properties);

			for (const FProperty* Property : Properties)
			{
				if (!Property)
				{
					AddError(TEXT("Invalid property returned by FGBAUtils::GetAllAttributeProperties"));
					continue;
				}

				AddInfo(FString::Printf(TEXT("Found property: %s.%s"), *Property->GetOwnerVariant().GetName(), *Property->GetName()));
			}

			TestFalse(TEXT("Properties not empty"), Properties.IsEmpty());
		});
	});

	/** Checks whether the attribute set class has to be considered to generate dropdown (filters out SKEL / REINST BP Class Generated By) */
	Describe(TEXT("GBAUtils::IsValidAttributeClass()"), [this]()
	{
		It(TEXT("should return true for regular Attribute Sets"), [this]()
		{
			TestTrue(TEXT("AttributeSet ok"), FGBAUtils::IsValidAttributeClass(UAttributeSet::StaticClass()));
		});

		It(TEXT("should return false for non Attribute Sets derived classes"), [this]()
		{
			TestFalse(TEXT("non AttributeSet ok"), FGBAUtils::IsValidAttributeClass(UObject::StaticClass()));
		});

		It(TEXT("should return true for BP Attribute Sets"), [this]()
		{
			const UClass* LoadedClass = StaticLoadClass(UObject::StaticClass(), nullptr, *FixtureLoadPath);
			AddInfo(FString::Printf(TEXT("Test with %s loaded BP class"), *GetNameSafe(LoadedClass)));

			if (!LoadedClass)
			{
				AddError(FString::Printf(TEXT("Couldn't load %s BP"), *FixtureLoadPath));
				return;
			}
			
			TestTrue(TEXT("BP AttributeSet ok"), FGBAUtils::IsValidAttributeClass(LoadedClass));
		});
	});
}
